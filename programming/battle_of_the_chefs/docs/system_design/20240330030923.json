{"Implementation approach":"We will use a dynamic programming approach to solve this problem. We will define a 2D array `dp` where `dp[i][j]` represents the maximum number of candidate teams of size `j` that can be formed using the first `i` cooks. We will then iterate over the cooks and for each cook, we will consider all possible team sizes `j` and update `dp[i][j]` accordingly. Finally, we will return the maximum value of `dp[N][j]` for all `j` such that `dp[N][j] <= M`.","File list":["main.py"],"Data structures and interfaces":"\nclassDiagram\n    class Solution {\n        -cooks: list[int]\n        -C: int\n        -M: int\n        -dp: list[list[int]]\n        +__init__(cooks: list[int], C: int, M: int)\n        +solve() list[int]\n    }\n","Program call flow":"\nsequenceDiagram\n    participant Solution\n    Solution->>Solution: __init__(cooks, C, M)\n    Solution->>Solution: solve()\n","Anything UNCLEAR":"None"}