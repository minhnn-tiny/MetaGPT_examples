{"Implementation approach":"We will use a dynamic programming approach to solve this problem. We will define a 2D array dp such that dp[i][j] represents the expected number of hearts in a randomly chosen rectangle that starts at cell (i, j). We can compute dp[i][j] using the following recurrence relation:\n\ndp[i][j] = (1 / A) * (dp[i + 1][j] + dp[i][j + 1] - dp[i + 1][j + 1] + p[i][j])\n\nwhere A is the total area of all possible rectangles, and p[i][j] is the probability that a randomly chosen rectangle starts at cell (i, j).","File list":["main.py","game.py"],"Data structures and interfaces":"\nclassDiagram\n    class Main {\n        -game: Game\n        +main() None\n    }\n    class Game {\n        -grid: List[List[int]]\n        -hearts: List[int]\n        -dp: List[List[float]]\n        +__init__(grid: List[List[int]], hearts: List[int])\n        +calculate_expected_hearts() List[List[float]]\n        +get_expected_hearts(i: int, j: int) float\n    }\n    Main --> Game\n","Program call flow":"\nsequenceDiagram\n    participant M as Main\n    participant G as Game\n    M->>G: __init__(grid, hearts)\n    G->>G: calculate_expected_hearts()\n    M->>G: get_expected_hearts(i, j)\n    G-->>M: return expected_hearts\n","Anything UNCLEAR":"None"}