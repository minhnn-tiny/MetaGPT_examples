
sequenceDiagram
    participant M as Main
    participant G as Graph
    participant N as Node
    participant E as Edge
    participant A as AStar
    M->>G: add_node(start_node)
    M->>G: add_node(goal_node)
    M->>G: add_edge(edge1)
    M->>G: add_edge(edge2)
    M->>A: __init__(G, start_node, goal_node)
    A->>G: get_node(start_node_id)
    A->>G: get_node(goal_node_id)
    A->>G: get_edge(edge1_id)
    A->>G: get_edge(edge2_id)
    A->>G: search()
    A-->>M: return path
    M-->>G: add_node(node3)
    M-->>G: add_edge(edge3)
    M-->>A: __init__(G, start_node, goal_node)
    A-->>G: get_node(start_node_id)
    A-->>G: get_node(goal_node_id)
    A-->>G: get_edge(edge1_id)
    A-->>G: get_edge(edge2_id)
    A-->>G: get_edge(edge3_id)
    A-->>G: search()
    A--->>M: return path
