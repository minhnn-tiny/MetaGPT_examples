{"Implementation approach":"We will use the A* search algorithm to find the minimum sweat path from the hostel to the classroom. The A* search algorithm is a graph search algorithm that is used to find the shortest path between two nodes in a graph. The A* search algorithm uses a heuristic function to estimate the cost of the path from the current node to the goal node. The heuristic function is used to guide the search algorithm towards the goal node. We will use the Euclidean distance between two nodes as the heuristic function.","File list":["main.py","graph.py","a_star.py"],"Data structures and interfaces":"\nclassDiagram\n    class Main {\n        -Graph graph\n        -AStar a_star\n        +main() str\n    }\n    class Graph {\n        -Nodes nodes\n        -Edges edges\n        +add_node(node: Node)\n        +add_edge(edge: Edge)\n        +get_node(node_id: str) Node\n        +get_edge(edge_id: str) Edge\n    }\n    class Node {\n        -id: str\n        -x: float\n        -y: float\n        +__init__(id: str, x: float, y: float)\n    }\n    class Edge {\n        -id: str\n        -source: Node\n        -destination: Node\n        -weight: float\n        +__init__(id: str, source: Node, destination: Node, weight: float)\n    }\n    class AStar {\n        -graph: Graph\n        -start_node: Node\n        -goal_node: Node\n        +__init__(graph: Graph, start_node: Node, goal_node: Node)\n        +search() list\n    }\n    Main --> Graph\n    Main --> AStar\n    Graph --> Node\n    Graph --> Edge\n    AStar --> Graph\n    AStar --> Node\n    AStar --> Node\n","Program call flow":"\nsequenceDiagram\n    participant M as Main\n    participant G as Graph\n    participant N as Node\n    participant E as Edge\n    participant A as AStar\n    M->>G: add_node(start_node)\n    M->>G: add_node(goal_node)\n    M->>G: add_edge(edge1)\n    M->>G: add_edge(edge2)\n    M->>A: __init__(G, start_node, goal_node)\n    A->>G: get_node(start_node_id)\n    A->>G: get_node(goal_node_id)\n    A->>G: get_edge(edge1_id)\n    A->>G: get_edge(edge2_id)\n    A->>G: search()\n    A-->>M: return path\n    M-->>G: add_node(node3)\n    M-->>G: add_edge(edge3)\n    M-->>A: __init__(G, start_node, goal_node)\n    A-->>G: get_node(start_node_id)\n    A-->>G: get_node(goal_node_id)\n    A-->>G: get_edge(edge1_id)\n    A-->>G: get_edge(edge2_id)\n    A-->>G: get_edge(edge3_id)\n    A-->>G: search()\n    A--->>M: return path\n","Anything UNCLEAR":"None"}