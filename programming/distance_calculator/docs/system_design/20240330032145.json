{"Implementation approach":"We will use the Dijkstra's algorithm to find the shortest path between two locations.","File list":["main.py"],"Data structures and interfaces":"\nclassDiagram\n    class Graph {\n        -nodes: Dict[str, Node]\n        -edges: Dict[Tuple[str, str], int]\n        +add_node(node: Node)\n        +add_edge(node1: str, node2: str, weight: int)\n        +get_shortest_path(source: str, destination: str) List[str]\n    }\n    class Node {\n        -name: str\n        -neighbors: Dict[str, int]\n        +__init__(name: str)\n    }\n","Program call flow":"\nsequenceDiagram\n    participant Graph as Graph\n    participant Node as Node\n    Graph->>Node: __init__(name)\n    Graph->>Graph: add_node(node)\n    Graph->>Graph: add_edge(node1, node2, weight)\n    Graph->>Graph: get_shortest_path(source, destination)\n","Anything UNCLEAR":"None."}