{"Language":"en_us","Programming Language":"Python","Original Requirements":"All submissions for this problem are available. Read problems statements in Mandarin Chinese  and Russian.\nForking is an important tactics in the game of chess. A piece is said to perform a fork if \n1) It is on a safe square, i.e., the next move by the opponent does not kill the piece\n2) It targets atleast 2 of the opponents pieces in its next move. So even if the opponent moves one of his pieces to safety, one of his remaining pieces can be killed.\n\nYou are given an NxN board, containing M White Queens. Remember, a Queen can move vertically, horizontally and diagonally; and kills any opponents piece directly in these directions. A Knight has 8 possible moves from position (i,j), viz (i+1,j+2), (i+1,j-2), (i-1,j+2), (i-1,j-2), (i+2,j+1), (i+2,j-1), (i-2,j+1), (i-2,j-1) (while remaining inside the NxN board). You have to find out the number of unoccupied positions on the NxN board, where a Black Knight can be placed such that it forks atleast 2 Queens.\n\nINPUT:\nFirst line contains T, number of testcases\nEach testcase starts with a line containing two integers N and M\nThen M lines follow, ith line containing two space separated integers X[i] and Y[i], the coordinates of the ith Queen\n\nOUTPUT:\nFor each testcase, output a single line containing the answer to the question\n\nCONSTRAINTS:\n1<=T<=10\n1<=X[i],Y[i]<=N \n0<=M<=N*N \n40 points : 1<=N<=8\n60 points : 1<=N<=1000\nNo two queens can be in the same square.\n\nSAMPLE INPUT:\n1\n5 2\n1 1\n3 1\n\nSAMPLE OUTPUT:\n1\n\nEXPLANATION:\nOnly forking position is (2,3) ","Project Name":"chess_knight_fork","Product Goals":["Create an engaging user experience","Improve accessibility, be responsive","More beautiful UI"],"User Stories":["As a player, I want to be able to choose difficulty levels","As a player, I want to see my score after each game","As a player, I want to get restart button when I lose","As a player, I want to see beautiful UI that make me feel good","As a player, I want to play game via mobile phone"],"Competitive Analysis":["2048 Game A: Simple interface, lacks responsive features","play2048.co: Beautiful and responsive UI with my best score shown","2048game.com: Responsive UI with my best score shown, but many ads"],"Competitive Quadrant Chart":"quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]","Requirement Analysis":"The problem is to find the number of unoccupied positions on an NxN chessboard where a black knight can be placed such that it forks at least two white queens. A knight can move in an 'L' pattern, two squares in one direction and then one square perpendicularly. A queen can move any number of squares along a rank, file, or diagonal. No two queens can be in the same square.\n\nThe problem can be solved using a brute-force approach. For each unoccupied position on the board, check if a black knight placed there can fork at least two queens. If so, increment the count of forking positions. The time complexity of this approach is O(N^4), where N is the size of the board. \n\nA more efficient approach is to use a bitmask to keep track of the squares that are attacked by the queens. For each unoccupied position on the board, check if the bitmask for that position is set. If so, the position is not a forking position. Otherwise, place a black knight on the position and update the bitmask to reflect the squares that are now attacked by the knight. The time complexity of this approach is O(N^2), where N is the size of the board.","Requirement Pool":[["P0","The main code ..."],["P0","The game algorithm ..."]],"UI Design draft":"Basic function description with a simple style and layout.","Anything UNCLEAR":""}