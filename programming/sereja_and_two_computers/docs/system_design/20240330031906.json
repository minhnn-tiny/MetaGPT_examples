{"Implementation approach":"We will use a greedy algorithm to solve this problem. The algorithm will work as follows:\n\n1. Sort the programs in ascending order of their running time on the first computer.\n2. For each program, find the earliest time at which it can be run on the second computer without violating the constraints of the problem.\n3. Output the optimal time to run all programs on both computers, as well as the start time of each program on both computers.","File list":["main.py"],"Data structures and interfaces":"\nclassDiagram\n    class Program {\n        -a: int\n        -b: int\n        +__init__(a: int, b: int)\n        +__lt__(other: Program) bool\n    }\n    class Solution {\n        -programs: list[Program]\n        -optimal_time: int\n        -start_times: list[tuple[int, int]]\n        +__init__(programs: list[Program])\n        +solve() tuple[int, list[tuple[int, int]]]\n    }\n","Program call flow":"\nsequenceDiagram\n    participant S as Solution\n    S->>S: __init__(programs)\n    S->>S: solve()\n    S-->>S: return optimal_time, start_times\n","Anything UNCLEAR":""}