{"Language":"en_us","Programming Language":"Python","Original Requirements":"All submissions for this problem are available.\nThis problem was part of the CodeChef April Challenge.  All user submissions for this contest problem are publicly available here.\nShaheen has bought some gifts for a friend, which are wrapped up in several boxes of different sizes (all of which are full). She will need to carry the gifts a long way to her friend's house, so she would prefer to add some extra packing, and accommodate everything in one extra box. Moreover, to avoid damaging the contents, she does not wish to place more than two boxes directly within any box; however, boxes can be placed within boxes which contain other boxes, etc. A box which is used for holding two boxes of sizes a and b will have size a+b, and will cost Shaheen a+b coins at the local store. Please help Shaheen determine the minimum cost required to achieve the complete packing, and the number of different possible packings (arrangements of boxes within each other) having such a minimal cost.\nInput\nThe first line of input is n <=2000, the number of boxes with Shaheen's gifts. The next n lines of input contain one positive integer each, not greater than 106, representing the sizes of the successive boxes.\n\nOutput\n\nPrint to output exactly 2 numbers separated by spaces: the cost of the optimal solution, and the number of distinct ways of achieving this solution (modulo 109).\n\nExample\n\nInput:\n5\n3\n2\n3\n5\n1\n\nOutput:\n31 3\n\n\nExplanation:\nThe three solutions leading to cost 31 are as follows:","Project Name":"packing_boxes","Product Goals":["Minimize the cost of packing the gifts","Find the number of different possible packings","Handle large inputs efficiently"],"User Stories":["As Shaheen, I want to find the cheapest way to pack my gifts","As Shaheen, I want to know how many different ways I can pack my gifts","As Shaheen, I want to be able to pack a large number of gifts efficiently"],"Competitive Analysis":["Box Packer A: Can handle large inputs, but does not find the minimum cost","Box Packer B: Finds the minimum cost, but is not efficient for large inputs","Box Packer C: Can handle large inputs and finds the minimum cost, but does not count the number of different packings"],"Competitive Quadrant Chart":"quadrantChart\n    title \"Reach and engagement of campaigns\"\n    x-axis \"Low Reach\" --> \"High Reach\"\n    y-axis \"Low Engagement\" --> \"High Engagement\"\n    quadrant-1 \"We should expand\"\n    quadrant-2 \"Need to promote\"\n    quadrant-3 \"Re-evaluate\"\n    quadrant-4 \"May be improved\"\n    \"Campaign A\": [0.3, 0.6]\n    \"Campaign B\": [0.45, 0.23]\n    \"Campaign C\": [0.57, 0.69]\n    \"Campaign D\": [0.78, 0.34]\n    \"Campaign E\": [0.40, 0.34]\n    \"Campaign F\": [0.35, 0.78]\n    \"Our Target Product\": [0.5, 0.6]","Requirement Analysis":"The requirements are clear and concise. The problem is well-defined and there are no ambiguities. The requirements can be divided into three main parts: finding the minimum cost, finding the number of different packings, and handling large inputs efficiently.","Requirement Pool":[["P0","Find the minimum cost of packing the gifts"],["P0","Find the number of different possible packings"],["P1","Handle large inputs efficiently"]],"UI Design draft":"The UI will be simple and easy to use. The user will be able to input the sizes of the gifts and the program will output the minimum cost and the number of different packings.","Anything UNCLEAR":""}