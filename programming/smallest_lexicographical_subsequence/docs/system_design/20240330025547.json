{"Implementation approach":"We will use a greedy approach to solve this problem. We will iterate over the string from left to right, and for each character, we will check if it is the smallest character that has not been used yet. If it is, we will add it to our subsequence. Otherwise, we will skip it. This approach will guarantee that we find the smallest lexicographical subsequence of the given length.","File list":["main.py"],"Data structures and interfaces":"\nclassDiagram\n    class Solution:\n        -string: str\n        -k: int\n        -result: str\n        +__init__(string: str, k: int)\n        +solve() -> str\n","Program call flow":"\nsequenceDiagram\n    participant Solution\n    Solution->>Solution: __init__(string, k)\n    Solution->>Solution: solve()\n    Solution-->>Solution: return result\n","Anything UNCLEAR":"None."}